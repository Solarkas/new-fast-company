{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/js/react/front-backend-fast-company/new-fast-company/src/app/hooks/useQualities.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport qualityService from \"../services/quality.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QualitiesContex = /*#__PURE__*/React.createContext();\nexport const useQualities = () => {\n  _s();\n\n  return useContext(QualitiesContex);\n};\n\n_s(useQualities, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const QualitiesProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [qualities, setQualities] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setLoading] = useState(true);\n  const prevState = useRef();\n  useEffect(() => {\n    const getQualities = async () => {\n      try {\n        const {\n          content\n        } = await qualityService.fetchAll();\n        setQualities(content);\n        setLoading(false);\n      } catch (error) {\n        errorCather(error);\n      }\n    };\n\n    getQualities();\n  }, []);\n\n  const getQuality = id => {\n    return qualities.find(q => q._id === id);\n  };\n\n  const updateQuality = async ({\n    _id: id,\n    ...data\n  }) => {\n    try {\n      const {\n        content\n      } = await qualityService.update(id, data);\n      setQualities(prevState => prevState.map(item => {\n        if (item._id === content._id) {\n          return content;\n        }\n\n        return item;\n      }));\n      return content;\n    } catch (error) {\n      errorCather(error);\n    }\n  };\n\n  const addQuality = async data => {\n    try {\n      const {\n        content\n      } = await qualityService.create(data);\n      setQualities(prevState => [...prevState, content]);\n      return content;\n    } catch (error) {\n      errorCather(error);\n    }\n  };\n\n  const deleteQuaility = async id => {\n    prevState.current = qualities;\n\n    try {\n      const {\n        content\n      } = await qualityService.delete(id);\n      setQualities(prevState => {\n        return prevState.filter(item => item._id !== content._id);\n      });\n      return content;\n    } catch (error) {\n      errorCather(error);\n    }\n  };\n\n  function errorCather(error) {\n    const {\n      message\n    } = error.response.data;\n    setError(message);\n  }\n\n  useEffect(() => {\n    if (error !== null) {\n      toast(error);\n      setError(null);\n    }\n  }, [error]);\n  return /*#__PURE__*/_jsxDEV(QualitiesContex.Provider, {\n    value: {\n      qualities,\n      getQuality,\n      updateQuality,\n      addQuality,\n      deleteQuaility\n    },\n    children: !isLoading ? children : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Qualities loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(QualitiesProvider, \"PMrnka9vIcKJdMJsk3W2f7VDOGY=\");\n\n_c = QualitiesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"QualitiesProvider\");","map":{"version":3,"sources":["/Users/macbook/Desktop/js/react/front-backend-fast-company/new-fast-company/src/app/hooks/useQualities.jsx"],"names":["React","useContext","useEffect","useRef","useState","toast","qualityService","QualitiesContex","createContext","useQualities","QualitiesProvider","children","qualities","setQualities","error","setError","isLoading","setLoading","prevState","getQualities","content","fetchAll","errorCather","getQuality","id","find","q","_id","updateQuality","data","update","map","item","addQuality","create","deleteQuaility","current","delete","filter","message","response"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport qualityService from \"../services/quality.service\";\n\nconst QualitiesContex = React.createContext();\nexport const useQualities = () => {\n  return useContext(QualitiesContex);\n};\n\nexport const QualitiesProvider = ({ children }) => {\n  const [qualities, setQualities] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setLoading] = useState(true);\n  const prevState = useRef();\n  useEffect(() => {\n    const getQualities = async () => {\n      try {\n        const { content } = await qualityService.fetchAll();\n        setQualities(content);\n        setLoading(false);\n      } catch (error) {\n        errorCather(error);\n      }\n    };\n    getQualities();\n  }, []);\n\n  const getQuality = (id) => {\n    return qualities.find((q) => q._id === id);\n  };\n\n  const updateQuality = async ({ _id: id, ...data }) => {\n    try {\n      const { content } = await qualityService.update(id, data);\n      setQualities((prevState) =>\n        prevState.map((item) => {\n          if (item._id === content._id) {\n            return content;\n          }\n          return item;\n        })\n      );\n      return content;\n    } catch (error) {\n      errorCather(error);\n    }\n  };\n\n  const addQuality = async (data) => {\n    try {\n      const { content } = await qualityService.create(data);\n      setQualities((prevState) => [...prevState, content]);\n      return content;\n    } catch (error) {\n      errorCather(error);\n    }\n  };\n\n  const deleteQuaility = async (id) => {\n    prevState.current = qualities;\n    try {\n      const { content } = await qualityService.delete(id);\n      setQualities((prevState) => {\n        return prevState.filter((item) => item._id !== content._id);\n      });\n      return content;\n    } catch (error) {\n      errorCather(error);\n    }\n  };\n\n  function errorCather(error) {\n    const { message } = error.response.data;\n    setError(message);\n  }\n\n  useEffect(() => {\n    if (error !== null) {\n      toast(error);\n      setError(null);\n    }\n  }, [error]);\n  return (\n    <QualitiesContex.Provider\n      value={{\n        qualities,\n        getQuality,\n        updateQuality,\n        addQuality,\n        deleteQuaility,\n      }}\n    >\n      {!isLoading ? children : <h1>Qualities loading...</h1>}\n    </QualitiesContex.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}