{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport config from \"../config.json\";\naxios.defaults.baseURL = config.apiEndpoint;\naxios.interceptors.response.use(res => res, function (error) {\n  const expectedErrors = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedErrors) {\n    console.log(error);\n    toast.error(\"Something was wrong. Try it later.\");\n  }\n\n  return Promise.reject(error);\n});\nconst httpService = {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};\nexport default httpService;","map":{"version":3,"sources":["/Users/macbook/Desktop/js/react/front-backend-fast-company/new-fast-company/src/app/services/http.service.js"],"names":["axios","toast","config","defaults","baseURL","apiEndpoint","interceptors","response","use","res","error","expectedErrors","status","console","log","Promise","reject","httpService","get","post","put","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEAF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyBF,MAAM,CAACG,WAAhC;AAEAL,KAAK,CAACM,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACGC,GAAD,IAASA,GADX,EAEE,UAAUC,KAAV,EAAiB;AACf,QAAMC,cAAc,GAClBD,KAAK,CAACH,QAAN,IACAG,KAAK,CAACH,QAAN,CAAeK,MAAf,IAAyB,GADzB,IAEAF,KAAK,CAACH,QAAN,CAAeK,MAAf,GAAwB,GAH1B;;AAIA,MAAI,CAACD,cAAL,EAAqB;AACnBE,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAT,IAAAA,KAAK,CAACS,KAAN,CAAY,oCAAZ;AACD;;AACD,SAAOK,OAAO,CAACC,MAAR,CAAeN,KAAf,CAAP;AACD,CAZH;AAeA,MAAMO,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAElB,KAAK,CAACkB,GADO;AAElBC,EAAAA,IAAI,EAAEnB,KAAK,CAACmB,IAFM;AAGlBC,EAAAA,GAAG,EAAEpB,KAAK,CAACoB,GAHO;AAIlBC,EAAAA,MAAM,EAAErB,KAAK,CAACqB;AAJI,CAApB;AAOA,eAAeJ,WAAf","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport config from \"../config.json\";\n\naxios.defaults.baseURL = config.apiEndpoint;\n\naxios.interceptors.response.use(\n  (res) => res,\n  function (error) {\n    const expectedErrors =\n      error.response &&\n      error.response.status >= 400 &&\n      error.response.status < 500;\n    if (!expectedErrors) {\n      console.log(error);\n      toast.error(\"Something was wrong. Try it later.\");\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst httpService = {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n};\n\nexport default httpService;\n"]},"metadata":{},"sourceType":"module"}