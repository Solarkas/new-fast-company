{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/js/react/front-backend-fast-company/new-fast-company/src/app/components/page/editUserPage/editUserPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { validator } from \"../../../utils/validator\";\nimport api from \"../../../api\";\nimport TextField from \"../../common/form/textField\";\nimport SelectField from \"../../common/form/selectField\";\nimport RadioField from \"../../common/form/radioField\";\nimport MultiSelectField from \"../../common/form/multiSelectField\";\nimport BackHistoryButton from \"../../common/backButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditUserPage = () => {\n  _s();\n\n  const {\n    userId\n  } = useParams();\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState({\n    name: \"\",\n    email: \"\",\n    profession: \"\",\n    sex: \"male\",\n    qualities: []\n  });\n  const [professions, setProfession] = useState([]);\n  const [qualities, setQualities] = useState({});\n  const [errors, setErrors] = useState({});\n\n  const getProfessionById = id => {\n    for (const prof in professions) {\n      const profData = professions[prof];\n      if (profData._id === id) return profData;\n    }\n  };\n\n  const getQualities = elements => {\n    const qualitiesArray = [];\n\n    for (const elem of elements) {\n      for (const quality in qualities) {\n        if (elem.value === qualities[quality]._id) {\n          qualitiesArray.push(qualities[quality]);\n        }\n      }\n    }\n\n    return qualitiesArray;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isValid = validate();\n    if (!isValid) return;\n    const {\n      profession,\n      qualities\n    } = data;\n    api.users.update(userId, { ...data,\n      profession: getProfessionById(profession),\n      qualities: getQualities(qualities)\n    }).then(data => history.push(`/users/${data._id}`));\n    console.log(data);\n  };\n\n  const transformData = data => {\n    return data.map(qual => ({\n      label: qual.name,\n      value: qual._id\n    }));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    api.users.getById(userId).then(_ref => {\n      let {\n        profession,\n        qualities,\n        ...data\n      } = _ref;\n      return setData(prevState => ({ ...prevState,\n        ...data,\n        qualities: transformData(qualities),\n        profession: profession._id\n      }));\n    });\n    api.qualities.fetchAll().then(data => setQualities(data));\n    api.professions.fetchAll().then(data => setProfession(data));\n  }, []);\n  useEffect(() => {\n    if (data._id) setIsLoading(false);\n  }, [data]);\n  const validatorConfig = {\n    email: {\n      isRequired: {\n        message: \"Электронная почта обязательна для заполнения\"\n      },\n      isEmail: {\n        message: \"Email введен некорректно\"\n      }\n    },\n    name: {\n      isRequired: {\n        message: \"Введите ваше имя\"\n      }\n    }\n  };\n  useEffect(() => validate(), [data]);\n\n  const handleChange = target => {\n    setData(prevState => ({ ...prevState,\n      [target.name]: target.value\n    }));\n  };\n\n  const validate = () => {\n    const errors = validator(data, validatorConfig);\n    setErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const isValid = Object.keys(errors).length === 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(BackHistoryButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6 offset-md-3 shadow p-4\",\n        children: !isLoading && Object.keys(professions).length > 0 ? /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"\\u0418\\u043C\\u044F\",\n            name: \"name\",\n            value: data.name,\n            onChange: handleChange,\n            error: errors.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"\\u042D\\u043B\\u0435\\u043A\\u0442\\u0440\\u043E\\u043D\\u043D\\u0430\\u044F \\u043F\\u043E\\u0447\\u0442\\u0430\",\n            name: \"email\",\n            value: data.email,\n            onChange: handleChange,\n            error: errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(SelectField, {\n            label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438 \\u0441\\u0432\\u043E\\u044E \\u043F\\u0440\\u043E\\u0444\\u0435\\u0441\\u0441\\u0438\\u044E\",\n            defaultOption: \"Choose...\",\n            options: professions,\n            name: \"profession\",\n            onChange: handleChange,\n            value: data.profession,\n            error: errors.profession\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(RadioField, {\n            options: [{\n              name: \"Male\",\n              value: \"male\"\n            }, {\n              name: \"Female\",\n              value: \"female\"\n            }, {\n              name: \"Other\",\n              value: \"other\"\n            }],\n            value: data.sex,\n            name: \"sex\",\n            onChange: handleChange,\n            label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448 \\u043F\\u043E\\u043B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(MultiSelectField, {\n            defaultValue: data.qualities,\n            options: qualities,\n            onChange: handleChange,\n            name: \"qualities\",\n            label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448\\u0438 \\u043A\\u0430\\u0447\\u0435\\u0441\\u0442\\u0432\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: !isValid,\n            className: \"btn btn-primary w-100 mx-auto\",\n            children: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this) : \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditUserPage, \"UWveWKoSnvKUfZh0QEcUomy/V74=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = EditUserPage;\nexport default EditUserPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditUserPage\");","map":{"version":3,"sources":["/Users/macbook/Desktop/js/react/front-backend-fast-company/new-fast-company/src/app/components/page/editUserPage/editUserPage.jsx"],"names":["React","useEffect","useState","useHistory","useParams","validator","api","TextField","SelectField","RadioField","MultiSelectField","BackHistoryButton","EditUserPage","userId","history","isLoading","setIsLoading","data","setData","name","email","profession","sex","qualities","professions","setProfession","setQualities","errors","setErrors","getProfessionById","id","prof","profData","_id","getQualities","elements","qualitiesArray","elem","quality","value","push","handleSubmit","e","preventDefault","isValid","validate","users","update","then","console","log","transformData","map","qual","label","getById","prevState","fetchAll","validatorConfig","isRequired","message","isEmail","handleChange","target","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { validator } from \"../../../utils/validator\";\nimport api from \"../../../api\";\nimport TextField from \"../../common/form/textField\";\nimport SelectField from \"../../common/form/selectField\";\nimport RadioField from \"../../common/form/radioField\";\nimport MultiSelectField from \"../../common/form/multiSelectField\";\nimport BackHistoryButton from \"../../common/backButton\";\n\nconst EditUserPage = () => {\n    const { userId } = useParams();\n    const history = useHistory();\n    const [isLoading, setIsLoading] = useState(false);\n    const [data, setData] = useState({\n        name: \"\",\n        email: \"\",\n        profession: \"\",\n        sex: \"male\",\n        qualities: []\n    });\n    const [professions, setProfession] = useState([]);\n    const [qualities, setQualities] = useState({});\n    const [errors, setErrors] = useState({});\n    const getProfessionById = (id) => {\n        for (const prof in professions) {\n            const profData = professions[prof];\n            if (profData._id === id) return profData;\n        }\n    };\n    const getQualities = (elements) => {\n        const qualitiesArray = [];\n        for (const elem of elements) {\n            for (const quality in qualities) {\n                if (elem.value === qualities[quality]._id) {\n                    qualitiesArray.push(qualities[quality]);\n                }\n            }\n        }\n        return qualitiesArray;\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const { profession, qualities } = data;\n        api.users\n            .update(userId, {\n                ...data,\n                profession: getProfessionById(profession),\n                qualities: getQualities(qualities)\n            })\n            .then((data) => history.push(`/users/${data._id}`));\n        console.log(data);\n    };\n    const transformData = (data) => {\n        return data.map((qual) => ({ label: qual.name, value: qual._id }));\n    };\n    useEffect(() => {\n        setIsLoading(true);\n        api.users.getById(userId).then(({ profession, qualities, ...data }) =>\n            setData((prevState) => ({\n                ...prevState,\n                ...data,\n                qualities: transformData(qualities),\n                profession: profession._id\n            }))\n        );\n        api.qualities.fetchAll().then((data) => setQualities(data));\n        api.professions.fetchAll().then((data) => setProfession(data));\n    }, []);\n    useEffect(() => {\n        if (data._id) setIsLoading(false);\n    }, [data]);\n\n    const validatorConfig = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n        name: {\n            isRequired: {\n                message: \"Введите ваше имя\"\n            }\n        }\n    };\n    useEffect(() => validate(), [data]);\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validate = () => {\n        const errors = validator(data, validatorConfig);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n    return (\n        <div className=\"container mt-5\">\n            <BackHistoryButton />\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\n                    {!isLoading && Object.keys(professions).length > 0 ? (\n                        <form onSubmit={handleSubmit}>\n                            <TextField\n                                label=\"Имя\"\n                                name=\"name\"\n                                value={data.name}\n                                onChange={handleChange}\n                                error={errors.name}\n                            />\n                            <TextField\n                                label=\"Электронная почта\"\n                                name=\"email\"\n                                value={data.email}\n                                onChange={handleChange}\n                                error={errors.email}\n                            />\n                            <SelectField\n                                label=\"Выбери свою профессию\"\n                                defaultOption=\"Choose...\"\n                                options={professions}\n                                name=\"profession\"\n                                onChange={handleChange}\n                                value={data.profession}\n                                error={errors.profession}\n                            />\n                            <RadioField\n                                options={[\n                                    { name: \"Male\", value: \"male\" },\n                                    { name: \"Female\", value: \"female\" },\n                                    { name: \"Other\", value: \"other\" }\n                                ]}\n                                value={data.sex}\n                                name=\"sex\"\n                                onChange={handleChange}\n                                label=\"Выберите ваш пол\"\n                            />\n                            <MultiSelectField\n                                defaultValue={data.qualities}\n                                options={qualities}\n                                onChange={handleChange}\n                                name=\"qualities\"\n                                label=\"Выберите ваши качества\"\n                            />\n                            <button\n                                type=\"submit\"\n                                disabled={!isValid}\n                                className=\"btn btn-primary w-100 mx-auto\"\n                            >\n                                Обновить\n                            </button>\n                        </form>\n                    ) : (\n                        \"Loading...\"\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EditUserPage;\n"]},"metadata":{},"sourceType":"module"}