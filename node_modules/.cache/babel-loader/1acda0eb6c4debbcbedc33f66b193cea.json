{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/js/react/front-backend-fast-company/new-fast-company/src/app/hooks/useProfession.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport professionService from \"../services/profession.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfessionContext = /*#__PURE__*/React.createContext();\nexport const useProfessions = () => {\n  _s();\n\n  return useContext(ProfessionContext);\n};\n\n_s(useProfessions, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const ProfessionProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [isLoading, setLoading] = useState(true);\n  const [professions, setProfessions] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getProfessions();\n  }, []);\n\n  async function getProfessions() {\n    try {\n      const {\n        content\n      } = await professionService.get();\n      setProfessions(content);\n      setLoading(false);\n    } catch (error) {\n      errorCatcher(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(ProfessionContext.Provider, {\n    value: {\n      isLoading,\n      professions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ProfessionProvider, \"K3Q3AZWx1OEHJpL8di8FjXaFwts=\");\n\n_c = ProfessionProvider;\n\nfunction errorCatcher(error) {\n  const {\n    message\n  } = error.response.data;\n  setError(message);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfessionProvider\");","map":{"version":3,"sources":["/Users/macbook/Desktop/js/react/front-backend-fast-company/new-fast-company/src/app/hooks/useProfession.jsx"],"names":["React","useContext","useEffect","useState","professionService","ProfessionContext","createContext","useProfessions","ProfessionProvider","children","isLoading","setLoading","professions","setProfessions","error","setError","getProfessions","content","get","errorCatcher","message","response","data"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;;AAEA,MAAMC,iBAAiB,gBAAGL,KAAK,CAACM,aAAN,EAA1B;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAClC,SAAON,UAAU,CAACI,iBAAD,CAAjB;AACD,CAFM;;GAAME,c;;AAIb,OAAO,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAClD,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,cAAf,GAAgC;AAC9B,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAc,MAAMb,iBAAiB,CAACc,GAAlB,EAA1B;AACAL,MAAAA,cAAc,CAACI,OAAD,CAAd;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACdK,MAAAA,YAAY,CAACL,KAAD,CAAZ;AACD;AACF;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAAEJ,MAAAA,SAAF;AAAaE,MAAAA;AAAb,KAAnC;AAAA,cACGH;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxBM;;IAAMD,kB;;KAAAA,kB;;AA0Bb,SAASW,YAAT,CAAsBL,KAAtB,EAA6B;AAC3B,QAAM;AAAEM,IAAAA;AAAF,MAAcN,KAAK,CAACO,QAAN,CAAeC,IAAnC;AACAP,EAAAA,QAAQ,CAACK,OAAD,CAAR;AACD","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport professionService from \"../services/profession.service\";\n\nconst ProfessionContext = React.createContext();\n\nexport const useProfessions = () => {\n  return useContext(ProfessionContext);\n};\n\nexport const ProfessionProvider = ({ children }) => {\n  const [isLoading, setLoading] = useState(true);\n  const [professions, setProfessions] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getProfessions();\n  }, []);\n\n  async function getProfessions() {\n    try {\n      const { content } = await professionService.get();\n      setProfessions(content);\n      setLoading(false);\n    } catch (error) {\n      errorCatcher(error);\n    }\n  }\n\n  return (\n    <ProfessionContext.Provider value={{ isLoading, professions }}>\n      {children}\n    </ProfessionContext.Provider>\n  );\n};\n\nfunction errorCatcher(error) {\n  const { message } = error.response.data;\n  setError(message);\n}\n"]},"metadata":{},"sourceType":"module"}