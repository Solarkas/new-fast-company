{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/js/react/front-backend-fast-company/new-fast-company/src/app/hooks/useProfession.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport professionService from \"../services/profession.service\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfessionContext = /*#__PURE__*/React.createContext();\nexport const useProfessions = () => {\n  _s();\n\n  return useContext(ProfessionContext);\n};\n\n_s(useProfessions, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const ProfessionProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [isLoading, setLoading] = useState(true);\n  const [professions, setProfessions] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getProfessions();\n  }, []);\n  useEffect(() => {\n    if (error !== null) {\n      toast(error);\n      setError(null);\n    }\n  }, [error]);\n\n  async function getProfessions() {\n    try {\n      const {\n        content\n      } = await professionService.get();\n      setProfessions(content);\n      setLoading(false);\n    } catch (error) {\n      errorCatcher(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(ProfessionContext.Provider, {\n    value: {\n      isLoading,\n      professions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ProfessionProvider, \"eQj5bvGBQ6guH0k/LbzDF8DHNJw=\");\n\n_c = ProfessionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfessionProvider\");","map":{"version":3,"sources":["/Users/macbook/Desktop/js/react/front-backend-fast-company/new-fast-company/src/app/hooks/useProfession.jsx"],"names":["React","useContext","useEffect","useState","professionService","toast","ProfessionContext","createContext","useProfessions","ProfessionProvider","children","isLoading","setLoading","professions","setProfessions","error","setError","getProfessions","content","get","errorCatcher"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,MAAMC,iBAAiB,gBAAGN,KAAK,CAACO,aAAN,EAA1B;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAClC,SAAOP,UAAU,CAACK,iBAAD,CAAjB;AACD,CAFM;;GAAME,c;;AAIb,OAAO,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAClD,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;AAGAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,KAAK,KAAK,IAAd,EAAoB;AAClBV,MAAAA,KAAK,CAACU,KAAD,CAAL;AACAC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GALQ,EAKN,CAACD,KAAD,CALM,CAAT;;AAOA,iBAAeE,cAAf,GAAgC;AAC9B,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAc,MAAMd,iBAAiB,CAACe,GAAlB,EAA1B;AACAL,MAAAA,cAAc,CAACI,OAAD,CAAd;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACdK,MAAAA,YAAY,CAACL,KAAD,CAAZ;AACD;AACF;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAAEJ,MAAAA,SAAF;AAAaE,MAAAA;AAAb,KAAnC;AAAA,cACGH;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA9BM;;IAAMD,kB;;KAAAA,kB","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport professionService from \"../services/profession.service\";\nimport { toast } from \"react-toastify\";\n\nconst ProfessionContext = React.createContext();\n\nexport const useProfessions = () => {\n  return useContext(ProfessionContext);\n};\n\nexport const ProfessionProvider = ({ children }) => {\n  const [isLoading, setLoading] = useState(true);\n  const [professions, setProfessions] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getProfessions();\n  }, []);\n  useEffect(() => {\n    if (error !== null) {\n      toast(error);\n      setError(null);\n    }\n  }, [error]);\n\n  async function getProfessions() {\n    try {\n      const { content } = await professionService.get();\n      setProfessions(content);\n      setLoading(false);\n    } catch (error) {\n      errorCatcher(error);\n    }\n  }\n\n  return (\n    <ProfessionContext.Provider value={{ isLoading, professions }}>\n      {children}\n    </ProfessionContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}